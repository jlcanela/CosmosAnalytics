// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using ProjectModels;
//
//    var project = Project.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace ProjectModels
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    /// <summary>
    /// Schema for project management application data
    /// </summary>
    public partial class Project
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("dependencies")]
        public Dependency[] Dependencies { get; set; }

        /// <summary>
        /// Project overview
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Unique project identifier
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [JsonPropertyName("name")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public string Name { get; set; }

        /// <summary>
        /// Current project status
        /// </summary>
        [JsonPropertyName("status")]
        public ProjectStatus Status { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("tasks")]
        public Task[] Tasks { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("team")]
        public Team[] Team { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("timeline")]
        public Timeline Timeline { get; set; }
    }

    public partial class Dependency
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("dependsOn")]
        public string DependsOn { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("taskId")]
        public string TaskId { get; set; }
    }

    public partial class Task
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("assignee")]
        public string Assignee { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("dueDate")]
        public DateTimeOffset? DueDate { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("status")]
        public TaskStatus Status { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }
    }

    public partial class Team
    {
        [JsonPropertyName("role")]
        public Role Role { get; set; }

        [JsonPropertyName("userId")]
        public string UserId { get; set; }
    }

    public partial class Timeline
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("deadline")]
        public DateTimeOffset? Deadline { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("endDate")]
        public DateTimeOffset? EndDate { get; set; }

        [JsonPropertyName("startDate")]
        public DateTimeOffset StartDate { get; set; }
    }

    /// <summary>
    /// Current project status
    /// </summary>
    public enum ProjectStatus { Active, Cancelled, Completed, OnHold, Planned };

    public enum TaskStatus { Done, InProgress, Review, Todo };

    public enum Role { Designer, Developer, Manager, Qa };

    public partial class Project
    {
        public static Project FromJson(string json) => JsonSerializer.Deserialize<Project>(json, ProjectModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Project self) => JsonSerializer.Serialize(self, ProjectModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                ProjectStatusConverter.Singleton,
                TaskStatusConverter.Singleton,
                RoleConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter<string>
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override string Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value.Length >= 3)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
        {
            if (value.Length >= 3)
            {
                JsonSerializer.Serialize(writer, value, options);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class ProjectStatusConverter : JsonConverter<ProjectStatus>
    {
        public override bool CanConvert(Type t) => t == typeof(ProjectStatus);

        public override ProjectStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "active":
                    return ProjectStatus.Active;
                case "cancelled":
                    return ProjectStatus.Cancelled;
                case "completed":
                    return ProjectStatus.Completed;
                case "on_hold":
                    return ProjectStatus.OnHold;
                case "planned":
                    return ProjectStatus.Planned;
            }
            throw new Exception("Cannot unmarshal type ProjectStatus");
        }

        public override void Write(Utf8JsonWriter writer, ProjectStatus value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case ProjectStatus.Active:
                    JsonSerializer.Serialize(writer, "active", options);
                    return;
                case ProjectStatus.Cancelled:
                    JsonSerializer.Serialize(writer, "cancelled", options);
                    return;
                case ProjectStatus.Completed:
                    JsonSerializer.Serialize(writer, "completed", options);
                    return;
                case ProjectStatus.OnHold:
                    JsonSerializer.Serialize(writer, "on_hold", options);
                    return;
                case ProjectStatus.Planned:
                    JsonSerializer.Serialize(writer, "planned", options);
                    return;
            }
            throw new Exception("Cannot marshal type ProjectStatus");
        }

        public static readonly ProjectStatusConverter Singleton = new ProjectStatusConverter();
    }

    internal class TaskStatusConverter : JsonConverter<TaskStatus>
    {
        public override bool CanConvert(Type t) => t == typeof(TaskStatus);

        public override TaskStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "done":
                    return TaskStatus.Done;
                case "in_progress":
                    return TaskStatus.InProgress;
                case "review":
                    return TaskStatus.Review;
                case "todo":
                    return TaskStatus.Todo;
            }
            throw new Exception("Cannot unmarshal type TaskStatus");
        }

        public override void Write(Utf8JsonWriter writer, TaskStatus value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TaskStatus.Done:
                    JsonSerializer.Serialize(writer, "done", options);
                    return;
                case TaskStatus.InProgress:
                    JsonSerializer.Serialize(writer, "in_progress", options);
                    return;
                case TaskStatus.Review:
                    JsonSerializer.Serialize(writer, "review", options);
                    return;
                case TaskStatus.Todo:
                    JsonSerializer.Serialize(writer, "todo", options);
                    return;
            }
            throw new Exception("Cannot marshal type TaskStatus");
        }

        public static readonly TaskStatusConverter Singleton = new TaskStatusConverter();
    }

    internal class RoleConverter : JsonConverter<Role>
    {
        public override bool CanConvert(Type t) => t == typeof(Role);

        public override Role Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "designer":
                    return Role.Designer;
                case "developer":
                    return Role.Developer;
                case "manager":
                    return Role.Manager;
                case "qa":
                    return Role.Qa;
            }
            throw new Exception("Cannot unmarshal type Role");
        }

        public override void Write(Utf8JsonWriter writer, Role value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Role.Designer:
                    JsonSerializer.Serialize(writer, "designer", options);
                    return;
                case Role.Developer:
                    JsonSerializer.Serialize(writer, "developer", options);
                    return;
                case Role.Manager:
                    JsonSerializer.Serialize(writer, "manager", options);
                    return;
                case Role.Qa:
                    JsonSerializer.Serialize(writer, "qa", options);
                    return;
            }
            throw new Exception("Cannot marshal type Role");
        }

        public static readonly RoleConverter Singleton = new RoleConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
